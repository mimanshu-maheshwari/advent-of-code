use super::Result;
// find regions
// for all regions find area and perimeter
// multiply area with perimeter
// will take each region as separate
pub fn solve(input: String) -> Result<String> {
    let mut matrix = load_data(&input);
    let n = matrix.len();
    if n == 0 || matrix[0].len() != n {
        return Err("Shape of input is incorrect.".into());
    }
    let mut uf_set = DisjointSet::new(n * n);
    for row in 0..n {
        for col in 0..n {

        }
    }
    todo!();
}

fn neighbor(n: usize, (row, col): (usize, usize)) -> impl Iterator<Item = (usize, usize)> {
    let mut nbrs = Vec::with_capacity(4);
    // up
    if row > 0 {
        nbrs.push((row - 1, col));
    }
    // down
    if row + 1 < n {
        nbrs.push((row + 1, col));
    }
    // left
    if col > 0 {
        nbrs.push((row, col - 1));
    }
    // right
    if col + 1 < n {
        nbrs.push((row, col + 1));
    }
    nbrs.into_iter()
}

fn load_data(input: &str) -> Vec<Vec<u8>> {
    input
        .lines()
        .map(|line| line.bytes().collect::<Vec<_>>())
        .collect()
}

/// Union Find algorithm on disjoint set.
#[derive(Debug)]
struct DisjointSet {
    parent: Vec<usize>,
    size: Vec<usize>,
}

impl DisjointSet {
    fn new(n: usize) -> Self {
        Self {
            parent: (0..n).collect(),
            size: vec![1; n],
        }
    }

    fn union(&mut self, u: usize, v: usize) -> bool {
        let parent_u = self.find(u);
        let parent_v = self.find(v);
        if parent_u == parent_v {
            false
        } else {
            if self.size[parent_u] < self.size[parent_v] {
                self.parent[parent_u] = parent_v;
                self.size[parent_v] += self.size[parent_u];
            } else {
                self.parent[parent_v] = parent_u;
                self.size[parent_u] += self.size[parent_v];
            }
            true
        }
    }

    fn find(&mut self, n: usize) -> usize {
        if self.parent[n] != n {
            self.parent[n] = self.find(self.parent[n]);
        }
        self.parent[n]
    }
}

#[cfg(test)]
mod tests {
    use super::solve;
    #[test]
    fn example_1() {
        let input = "AAAA
BBCD
BBCC
EEEC";
        let expected = "140";
        let actual = solve(input.to_owned()).expect("Failed to solve input.");
        assert_eq!(expected, actual);
    }

    #[test]
    fn example_2() {
        let input = "OOOOO
OXOXO
OOOOO
OXOXO
OOOOO";
        let expected = "772";
        let actual = solve(input.to_owned()).expect("Failed to solve input.");
        assert_eq!(expected, actual);
    }

    #[test]
    fn example_3() {
        let input = "RRRRIICCFF
RRRRIICCCF
VVRRRCCFFF
VVRCCCJFFF
VVVVCJJCFE
VVIVCCJJEE
VVIIICJJEE
MIIIIIJJEE
MIIISIJEEE
MMMISSJEEE";
        let expected = "1930";
        let actual = solve(input.to_owned()).expect("Failed to solve input.");
        assert_eq!(expected, actual);
    }
}
